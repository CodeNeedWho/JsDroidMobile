package com.jsdroid.app.dao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.jsdroid.app.entity.Capture;
import com.jsdroid.app.entity.Image;
import com.jsdroid.app.entity.Log;
import com.jsdroid.app.entity.Plan;
import com.jsdroid.app.entity.Project;
import com.jsdroid.app.entity.Script;
import com.jsdroid.app.entity.Tool;

import com.jsdroid.app.dao.CaptureDao;
import com.jsdroid.app.dao.ImageDao;
import com.jsdroid.app.dao.LogDao;
import com.jsdroid.app.dao.PlanDao;
import com.jsdroid.app.dao.ProjectDao;
import com.jsdroid.app.dao.ScriptDao;
import com.jsdroid.app.dao.ToolDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig captureDaoConfig;
    private final DaoConfig imageDaoConfig;
    private final DaoConfig logDaoConfig;
    private final DaoConfig planDaoConfig;
    private final DaoConfig projectDaoConfig;
    private final DaoConfig scriptDaoConfig;
    private final DaoConfig toolDaoConfig;

    private final CaptureDao captureDao;
    private final ImageDao imageDao;
    private final LogDao logDao;
    private final PlanDao planDao;
    private final ProjectDao projectDao;
    private final ScriptDao scriptDao;
    private final ToolDao toolDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        captureDaoConfig = daoConfigMap.get(CaptureDao.class).clone();
        captureDaoConfig.initIdentityScope(type);

        imageDaoConfig = daoConfigMap.get(ImageDao.class).clone();
        imageDaoConfig.initIdentityScope(type);

        logDaoConfig = daoConfigMap.get(LogDao.class).clone();
        logDaoConfig.initIdentityScope(type);

        planDaoConfig = daoConfigMap.get(PlanDao.class).clone();
        planDaoConfig.initIdentityScope(type);

        projectDaoConfig = daoConfigMap.get(ProjectDao.class).clone();
        projectDaoConfig.initIdentityScope(type);

        scriptDaoConfig = daoConfigMap.get(ScriptDao.class).clone();
        scriptDaoConfig.initIdentityScope(type);

        toolDaoConfig = daoConfigMap.get(ToolDao.class).clone();
        toolDaoConfig.initIdentityScope(type);

        captureDao = new CaptureDao(captureDaoConfig, this);
        imageDao = new ImageDao(imageDaoConfig, this);
        logDao = new LogDao(logDaoConfig, this);
        planDao = new PlanDao(planDaoConfig, this);
        projectDao = new ProjectDao(projectDaoConfig, this);
        scriptDao = new ScriptDao(scriptDaoConfig, this);
        toolDao = new ToolDao(toolDaoConfig, this);

        registerDao(Capture.class, captureDao);
        registerDao(Image.class, imageDao);
        registerDao(Log.class, logDao);
        registerDao(Plan.class, planDao);
        registerDao(Project.class, projectDao);
        registerDao(Script.class, scriptDao);
        registerDao(Tool.class, toolDao);
    }
    
    public void clear() {
        captureDaoConfig.clearIdentityScope();
        imageDaoConfig.clearIdentityScope();
        logDaoConfig.clearIdentityScope();
        planDaoConfig.clearIdentityScope();
        projectDaoConfig.clearIdentityScope();
        scriptDaoConfig.clearIdentityScope();
        toolDaoConfig.clearIdentityScope();
    }

    public CaptureDao getCaptureDao() {
        return captureDao;
    }

    public ImageDao getImageDao() {
        return imageDao;
    }

    public LogDao getLogDao() {
        return logDao;
    }

    public PlanDao getPlanDao() {
        return planDao;
    }

    public ProjectDao getProjectDao() {
        return projectDao;
    }

    public ScriptDao getScriptDao() {
        return scriptDao;
    }

    public ToolDao getToolDao() {
        return toolDao;
    }

}
