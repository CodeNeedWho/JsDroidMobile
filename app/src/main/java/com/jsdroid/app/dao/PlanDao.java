package com.jsdroid.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jsdroid.app.entity.Plan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN".
*/
public class PlanDao extends AbstractDao<Plan, Long> {

    public static final String TABLENAME = "PLAN";

    /**
     * Properties of entity Plan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CycleText = new Property(1, String.class, "cycleText", false, "CYCLE_TEXT");
        public final static Property PlanType = new Property(2, String.class, "planType", false, "PLAN_TYPE");
        public final static Property CycleType = new Property(3, String.class, "cycleType", false, "CYCLE_TYPE");
        public final static Property RunDate = new Property(4, java.util.Date.class, "runDate", false, "RUN_DATE");
        public final static Property CircleDate = new Property(5, java.util.Date.class, "circleDate", false, "CIRCLE_DATE");
        public final static Property CircleTime = new Property(6, long.class, "circleTime", false, "CIRCLE_TIME");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
    }


    public PlanDao(DaoConfig config) {
        super(config);
    }
    
    public PlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CYCLE_TEXT\" TEXT," + // 1: cycleText
                "\"PLAN_TYPE\" TEXT," + // 2: planType
                "\"CYCLE_TYPE\" TEXT," + // 3: cycleType
                "\"RUN_DATE\" INTEGER," + // 4: runDate
                "\"CIRCLE_DATE\" INTEGER," + // 5: circleDate
                "\"CIRCLE_TIME\" INTEGER NOT NULL ," + // 6: circleTime
                "\"CONTENT\" TEXT);"); // 7: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Plan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cycleText = entity.getCycleText();
        if (cycleText != null) {
            stmt.bindString(2, cycleText);
        }
 
        String planType = entity.getPlanType();
        if (planType != null) {
            stmt.bindString(3, planType);
        }
 
        String cycleType = entity.getCycleType();
        if (cycleType != null) {
            stmt.bindString(4, cycleType);
        }
 
        java.util.Date runDate = entity.getRunDate();
        if (runDate != null) {
            stmt.bindLong(5, runDate.getTime());
        }
 
        java.util.Date circleDate = entity.getCircleDate();
        if (circleDate != null) {
            stmt.bindLong(6, circleDate.getTime());
        }
        stmt.bindLong(7, entity.getCircleTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Plan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cycleText = entity.getCycleText();
        if (cycleText != null) {
            stmt.bindString(2, cycleText);
        }
 
        String planType = entity.getPlanType();
        if (planType != null) {
            stmt.bindString(3, planType);
        }
 
        String cycleType = entity.getCycleType();
        if (cycleType != null) {
            stmt.bindString(4, cycleType);
        }
 
        java.util.Date runDate = entity.getRunDate();
        if (runDate != null) {
            stmt.bindLong(5, runDate.getTime());
        }
 
        java.util.Date circleDate = entity.getCircleDate();
        if (circleDate != null) {
            stmt.bindLong(6, circleDate.getTime());
        }
        stmt.bindLong(7, entity.getCircleTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Plan readEntity(Cursor cursor, int offset) {
        Plan entity = new Plan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cycleText
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // planType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cycleType
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // runDate
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // circleDate
            cursor.getLong(offset + 6), // circleTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Plan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCycleText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlanType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCycleType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRunDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setCircleDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setCircleTime(cursor.getLong(offset + 6));
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Plan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Plan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Plan entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
