/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.jetbrains.plugins.groovy.lang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.jetbrains.plugins.groovy.lang.psi.GroovyElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_GroovyGeneratedLexer.flex</tt>
 */
public class _GroovyGeneratedLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\5\1\22\0\1\6\1\43\2\0\1\34\1\53\1\44\1\0\1\24\1\25\1\51\1\41\1\40\1"+
    "\32\1\31\1\52\12\0\1\37\1\36\1\47\1\42\1\33\1\50\1\35\1\0\1\67\1\0\1\70\1"+
    "\0\1\71\1\73\1\0\1\65\2\0\1\66\16\0\1\26\1\0\1\27\1\54\2\0\1\55\1\15\1\7\1"+
    "\17\1\4\1\20\1\60\1\3\1\14\1\0\1\16\1\5\1\11\1\12\1\10\1\63\1\72\1\21\1\2"+
    "\1\13\1\57\1\61\1\22\1\62\1\56\1\64\1\30\1\45\1\23\1\46\6\0\1\1\32\0\1\1\337"+
    "\0\1\1\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\14\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\11\1\25\0"+
    "\1\35\1\0\1\36\5\0\1\37\7\0\1\40\1\41"+
    "\1\42\1\43\1\44\1\0\1\45\1\0\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\0\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\35\0\1\73\6\0\1\74"+
    "\3\0\1\75\5\0\1\76\2\0\1\77\6\0\1\100"+
    "\1\101\1\0\1\102\1\0\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\26\0\1\111\1\112\1\0\1\113\1\0"+
    "\1\114\2\0\1\115\3\0\1\116\1\117\4\0\1\120"+
    "\10\0\1\121\11\0\1\122\4\0\1\123\5\0\1\124"+
    "\6\0\1\125\5\0\1\126\2\0\1\127\1\0\1\130"+
    "\2\0\1\131\2\0\1\132\7\0\1\133\2\0\1\134"+
    "\1\135\1\136\2\0\1\137\15\0\1\140\3\0\1\141"+
    "\1\0\1\142\5\0\1\143\1\144\3\0\1\145\6\0"+
    "\1\146\1\0\1\147\3\0\1\150\5\0\1\151\3\0"+
    "\1\152\5\0\1\153\12\0\1\154\1\155\1\0\1\156"+
    "\10\0\1\157\1\160\1\161\4\0\1\162\3\0\1\163"+
    "\1\164\16\0\1\165\1\166\12\0\1\167\2\0\1\170"+
    "\3\0\1\171\4\0\1\172\13\0\1\173\1\174\1\175"+
    "\10\0\1\176\1\177\14\0\1\200\1\201\3\0\1\202"+
    "\4\0\1\203\1\204\5\0\1\205\4\0\1\206\3\0"+
    "\1\207\1\0\1\210\3\0\1\211\5\0\1\212\6\0"+
    "\1\213\4\0\1\214\14\0\1\215\2\0\1\216\14\0"+
    "\1\217\1\220";

  private static int [] zzUnpackAction() {
    int [] result = new int[546];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\u0384\0\u03c0\0\u03fc"+
    "\0\u0438\0\74\0\74\0\u0474\0\74\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u05a0\0\74\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac"+
    "\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c"+
    "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c"+
    "\0\u0e88\0\74\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0"+
    "\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0"+
    "\0\74\0\74\0\74\0\74\0\u120c\0\74\0\u1248\0\74"+
    "\0\74\0\74\0\u1284\0\74\0\u12c0\0\74\0\74\0\74"+
    "\0\74\0\u12fc\0\u1338\0\74\0\74\0\74\0\74\0\74"+
    "\0\u1374\0\74\0\74\0\74\0\u13b0\0\u13ec\0\u1428\0\u1464"+
    "\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644"+
    "\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824"+
    "\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04"+
    "\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4"+
    "\0\u1c20\0\74\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88"+
    "\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\74\0\u1f2c"+
    "\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\74\0\74\0\u2094"+
    "\0\74\0\u20d0\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0"+
    "\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490"+
    "\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\74\0\74"+
    "\0\u2634\0\74\0\u2670\0\74\0\u26ac\0\u26e8\0\74\0\u2724"+
    "\0\u2760\0\u279c\0\74\0\74\0\u27d8\0\u2814\0\u2850\0\u288c"+
    "\0\74\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30"+
    "\0\u2a6c\0\74\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4"+
    "\0\u2c10\0\u2c4c\0\u2c88\0\74\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78"+
    "\0\74\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\74\0\u2ee0"+
    "\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\74\0\u3048\0\u3084"+
    "\0\u30c0\0\u30fc\0\u3138\0\74\0\u3174\0\u31b0\0\74\0\u31ec"+
    "\0\74\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\74\0\u3354"+
    "\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc\0\74\0\u34f8"+
    "\0\u3534\0\74\0\u3570\0\74\0\u35ac\0\u35e8\0\74\0\u3624"+
    "\0\u3660\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c\0\u37c8\0\u3804"+
    "\0\u3840\0\u387c\0\u38b8\0\u38f4\0\74\0\u3930\0\u396c\0\u39a8"+
    "\0\74\0\u39e4\0\74\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10"+
    "\0\74\0\74\0\u3b4c\0\u3b88\0\u3bc4\0\74\0\u3c00\0\u3c3c"+
    "\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4\0\74\0\u3de0"+
    "\0\u3e1c\0\u3e58\0\74\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84"+
    "\0\74\0\u3fc0\0\u3ffc\0\u4038\0\74\0\u4074\0\u40b0\0\u40ec"+
    "\0\u4128\0\u4164\0\74\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290"+
    "\0\u42cc\0\u4308\0\u4344\0\u4380\0\u43bc\0\74\0\74\0\u43f8"+
    "\0\74\0\u4434\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c"+
    "\0\u45d8\0\74\0\74\0\74\0\u4614\0\u4650\0\u468c\0\u46c8"+
    "\0\74\0\u4704\0\u4740\0\u477c\0\74\0\74\0\u47b8\0\u47f4"+
    "\0\u4830\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998\0\u49d4"+
    "\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4\0\74\0\74\0\u4b00\0\u4b3c"+
    "\0\u4b78\0\u4bb4\0\u4bf0\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c"+
    "\0\74\0\u4d58\0\u4d94\0\74\0\u4dd0\0\u4e0c\0\u4e48\0\74"+
    "\0\u4e84\0\u4ec0\0\u4efc\0\u4f38\0\74\0\u4f74\0\u4fb0\0\u4fec"+
    "\0\u5028\0\u5064\0\u50a0\0\u50dc\0\u5118\0\u5154\0\u5190\0\u51cc"+
    "\0\74\0\74\0\74\0\u5208\0\u5244\0\u5280\0\u52bc\0\u52f8"+
    "\0\u5334\0\u5370\0\u53ac\0\74\0\74\0\u53e8\0\u5424\0\u5460"+
    "\0\u549c\0\u54d8\0\u5514\0\u5550\0\u558c\0\u55c8\0\u5604\0\u5640"+
    "\0\u567c\0\74\0\74\0\u56b8\0\u56f4\0\u5730\0\74\0\u576c"+
    "\0\u57a8\0\u57e4\0\u5820\0\74\0\74\0\u585c\0\u5898\0\u58d4"+
    "\0\u5910\0\u594c\0\74\0\u5988\0\u59c4\0\u5a00\0\u5a3c\0\74"+
    "\0\u5a78\0\u5ab4\0\u5af0\0\74\0\u5b2c\0\74\0\u5b68\0\u5ba4"+
    "\0\u5be0\0\74\0\u5c1c\0\u5c58\0\u5c94\0\u5cd0\0\u5d0c\0\74"+
    "\0\u5d48\0\u5d84\0\u5dc0\0\u5dfc\0\u5e38\0\u5e74\0\74\0\u5eb0"+
    "\0\u5eec\0\u5f28\0\u5f64\0\74\0\u5fa0\0\u5fdc\0\u6018\0\u6054"+
    "\0\u6090\0\u60cc\0\u6108\0\u6144\0\u6180\0\u61bc\0\u61f8\0\u6234"+
    "\0\74\0\u6270\0\u62ac\0\74\0\u62e8\0\u6324\0\u6360\0\u639c"+
    "\0\u63d8\0\u6414\0\u6450\0\u648c\0\u64c8\0\u6504\0\u6540\0\u657c"+
    "\0\74\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[546];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\3\1\7"+
    "\2\2\1\10\1\11\1\12\1\13\1\2\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\3\2\1\53\1\2"+
    "\1\54\1\2\1\55\1\56\1\57\1\60\1\61\1\2"+
    "\1\62\75\0\1\3\4\0\1\3\70\0\1\63\7\0"+
    "\1\64\1\65\5\0\1\66\33\0\1\67\1\70\21\0"+
    "\1\71\4\0\1\72\47\0\1\73\21\0\1\74\3\0"+
    "\1\75\62\0\1\76\1\0\1\77\2\0\1\100\44\0"+
    "\1\101\22\0\1\102\50\0\1\103\1\0\1\104\17\0"+
    "\1\105\15\0\1\106\63\0\1\107\1\110\4\0\1\111"+
    "\1\112\60\0\1\113\2\0\1\114\10\0\1\115\34\0"+
    "\1\116\21\0\1\117\3\0\1\120\70\0\1\121\2\0"+
    "\1\122\3\0\1\123\40\0\1\124\22\0\1\125\72\0"+
    "\1\126\15\0\1\127\103\0\1\130\12\0\1\131\61\0"+
    "\1\132\1\133\6\0\1\134\64\0\1\135\6\0\1\136"+
    "\103\0\1\137\60\0\1\140\75\0\1\141\1\142\73\0"+
    "\1\143\3\0\1\144\67\0\1\145\73\0\1\146\1\0"+
    "\1\147\71\0\1\150\2\0\1\151\70\0\1\152\4\0"+
    "\1\153\55\0\1\154\5\0\1\155\2\0\1\156\62\0"+
    "\1\157\10\0\1\160\6\0\1\161\64\0\1\162\73\0"+
    "\1\163\73\0\1\164\33\0\1\165\12\0\1\166\66\0"+
    "\1\167\104\0\1\170\33\0\1\171\1\0\1\172\26\0"+
    "\1\173\71\0\1\174\77\0\1\175\67\0\1\176\70\0"+
    "\1\177\70\0\1\200\75\0\1\201\3\0\1\202\104\0"+
    "\1\203\33\0\1\204\30\0\1\205\75\0\1\206\71\0"+
    "\1\207\144\0\1\210\12\0\1\211\150\0\1\212\27\0"+
    "\1\213\72\0\1\214\73\0\1\215\136\0\1\216\73\0"+
    "\1\217\30\0\1\220\63\0\1\221\10\0\1\222\102\0"+
    "\1\223\64\0\1\224\65\0\1\225\102\0\1\226\4\0"+
    "\1\227\66\0\1\230\40\0\1\231\1\232\1\233\77\0"+
    "\1\234\12\0\1\235\10\0\1\236\64\0\1\237\77\0"+
    "\1\240\73\0\1\241\67\0\1\242\102\0\1\243\100\0"+
    "\1\244\132\0\1\245\24\0\1\246\104\0\1\247\64\0"+
    "\1\250\66\0\1\251\101\0\1\252\44\0\1\253\27\0"+
    "\1\254\67\0\1\255\114\0\1\256\15\0\1\257\57\0"+
    "\1\260\6\0\1\261\37\0\1\262\127\0\1\263\3\0"+
    "\1\264\67\0\1\265\64\0\1\266\102\0\1\267\73\0"+
    "\1\270\33\0\1\271\73\0\1\272\76\0\1\273\6\0"+
    "\1\274\67\0\1\275\3\0\1\276\66\0\1\277\101\0"+
    "\1\300\71\0\1\301\72\0\1\302\141\0\1\303\72\0"+
    "\1\304\24\0\1\305\76\0\1\306\65\0\1\307\107\0"+
    "\1\310\66\0\1\311\72\0\1\312\140\0\1\313\26\0"+
    "\1\314\67\0\1\315\70\0\1\316\73\0\1\317\100\0"+
    "\1\320\66\0\1\321\147\0\1\322\17\0\1\323\110\0"+
    "\1\324\54\0\1\325\104\0\1\326\64\0\1\327\76\0"+
    "\1\330\72\0\1\331\101\0\1\332\64\0\1\333\70\0"+
    "\1\334\101\0\1\335\146\0\1\336\22\0\1\337\1\0"+
    "\1\340\63\0\1\341\74\0\1\342\2\0\1\343\76\0"+
    "\1\344\64\0\1\345\101\0\1\346\70\0\1\347\71\0"+
    "\1\350\143\0\1\351\22\0\1\352\144\0\1\353\33\0"+
    "\1\354\133\0\1\355\73\0\1\356\20\0\1\357\150\0"+
    "\1\360\20\0\1\361\74\0\1\362\100\0\1\363\123\0"+
    "\1\364\52\0\1\365\56\0\1\366\102\0\1\367\135\0"+
    "\1\370\35\0\1\371\67\0\1\372\141\0\1\373\30\0"+
    "\1\374\62\0\1\375\72\0\1\376\147\0\1\377\100\0"+
    "\1\u0100\2\0\1\u0101\20\0\1\u0102\133\0\1\u0103\37\0"+
    "\1\u0104\57\0\1\u0105\101\0\1\u0106\67\0\1\u0107\100\0"+
    "\1\u0108\64\0\1\u0109\75\0\1\u010a\67\0\1\u010b\111\0"+
    "\1\u010c\64\0\1\u010d\67\0\1\u010e\67\0\1\u010f\105\0"+
    "\1\u0110\62\0\1\u0111\75\0\1\u0112\147\0\1\u0113\34\0"+
    "\1\u0114\56\0\1\u0115\70\0\1\u0116\104\0\1\u0117\64\0"+
    "\1\u0118\110\0\1\u0119\127\0\1\u011a\37\0\1\u011b\65\0"+
    "\1\u011c\76\0\1\u011d\61\0\1\u011e\105\0\1\u011f\134\0"+
    "\1\u0120\21\0\1\u0121\101\0\1\u0122\65\0\1\u0123\72\0"+
    "\1\u0124\110\0\1\u0125\134\0\1\u0126\15\0\1\u0127\147\0"+
    "\1\u0128\17\0\1\u0129\110\0\1\u012a\73\0\1\u012b\65\0"+
    "\1\u012c\64\0\1\u012d\144\0\1\u012e\73\0\1\u012f\32\0"+
    "\1\u0130\137\0\1\u0131\25\0\1\u0132\65\0\1\u0133\74\0"+
    "\1\u0134\101\0\1\u0135\74\0\1\u0136\65\0\1\u0137\100\0"+
    "\1\u0138\67\0\1\u0139\70\0\1\u013a\72\0\1\u013b\111\0"+
    "\1\u013c\71\0\1\u013d\63\0\1\u013e\76\0\1\u013f\75\0"+
    "\1\u0140\63\0\1\u0141\71\0\1\u0142\75\0\1\u0143\103\0"+
    "\1\u0144\70\0\1\u0145\75\0\1\u0146\72\0\1\u0147\101\0"+
    "\1\u0148\67\0\1\u0149\65\0\1\u014a\142\0\1\u014b\23\0"+
    "\1\u014c\72\0\1\u014d\74\0\1\u014e\100\0\1\u014f\67\0"+
    "\1\u0150\73\0\1\u0151\145\0\1\u0152\26\0\1\u0153\135\0"+
    "\1\u0154\32\0\1\u0155\66\0\1\u0156\77\0\1\u0157\140\0"+
    "\1\u0158\22\0\1\u0159\70\0\1\u015a\102\0\1\u015b\67\0"+
    "\1\u015c\70\0\1\u015d\101\0\1\u015e\70\0\1\u015f\104\0"+
    "\1\u0160\61\0\1\u0161\75\0\1\u0162\65\0\1\u0163\101\0"+
    "\1\u0164\142\0\1\u0165\26\0\1\u0166\67\0\1\u0167\71\0"+
    "\1\u0168\73\0\1\u0169\76\0\1\u016a\141\0\1\u016b\36\0"+
    "\1\u016c\62\0\1\u016d\76\0\1\u016e\74\0\1\u016f\66\0"+
    "\1\u0170\143\0\1\u0171\21\0\1\u0172\2\0\1\u0173\5\0"+
    "\1\u0174\71\0\1\u0175\64\0\1\u0176\76\0\1\u0177\71\0"+
    "\1\u0178\101\0\1\u0179\64\0\1\u017a\73\0\1\u017b\110\0"+
    "\1\u017c\56\0\1\u017d\103\0\1\u017e\137\0\1\u017f\23\0"+
    "\1\u0180\146\0\1\u0181\102\0\1\u0182\13\0\1\u0183\72\0"+
    "\1\u0184\66\0\1\u0185\73\0\1\u0186\71\0\1\u0187\14\0"+
    "\1\u0188\66\0\1\u0189\73\0\1\u018a\65\0\1\u018b\76\0"+
    "\1\u018c\100\0\1\u018d\67\0\1\u018e\155\0\1\u018f\13\0"+
    "\1\u0190\71\0\1\u0191\67\0\1\u0192\77\0\1\u0193\145\0"+
    "\1\u0194\24\0\1\u0195\64\0\1\u0196\73\0\1\u0197\147\0"+
    "\1\u0198\24\0\1\u0199\70\0\1\u019a\76\0\1\u019b\141\0"+
    "\1\u019c\30\0\1\u019d\70\0\1\u019e\76\0\1\u019f\67\0"+
    "\1\u01a0\76\0\1\u01a1\73\0\1\u01a2\70\0\1\u01a3\67\0"+
    "\1\u01a4\73\0\1\u01a5\100\0\1\u01a6\141\0\1\u01a7\33\0"+
    "\1\u01a8\66\0\1\u01a9\141\0\1\u01aa\31\0\1\u01ab\63\0"+
    "\1\u01ac\104\0\1\u01ad\60\0\1\u01ae\144\0\1\u01af\22\0"+
    "\1\u01b0\2\0\1\u01b1\5\0\1\u01b2\67\0\1\u01b3\72\0"+
    "\1\u01b4\147\0\1\u01b5\13\0\1\u01b6\101\0\1\u01b7\140\0"+
    "\1\u01b8\16\0\1\u01b9\111\0\1\u01ba\74\0\1\u01bb\63\0"+
    "\1\u01bc\72\0\1\u01bd\76\0\1\u01be\74\0\1\u01bf\63\0"+
    "\1\u01c0\73\0\1\u01c1\2\0\1\u01c2\5\0\1\u01c3\77\0"+
    "\1\u01c4\57\0\1\u01c5\100\0\1\u01c6\71\0\1\u01c7\67\0"+
    "\1\u01c8\73\0\1\u01c9\102\0\1\u01ca\64\0\1\u01cb\101\0"+
    "\1\u01cc\141\0\1\u01cd\30\0\1\u01ce\62\0\1\u01cf\102\0"+
    "\1\u01d0\64\0\1\u01d1\101\0\1\u01d2\73\0\1\u01d3\73\0"+
    "\1\u01d4\71\0\1\u01d5\67\0\1\u01d6\106\0\1\u01d7\66\0"+
    "\1\u01d8\141\0\1\u01d9\25\0\1\u01da\65\0\1\u01db\106\0"+
    "\1\u01dc\67\0\1\u01dd\65\0\1\u01de\73\0\1\u01df\100\0"+
    "\1\u01e0\65\0\1\u01e1\101\0\1\u01e2\100\0\1\u01e3\66\0"+
    "\1\u01e4\141\0\1\u01e5\26\0\1\u01e6\74\0\1\u01e7\72\0"+
    "\1\u01e8\77\0\1\u01e9\60\0\1\u01ea\73\0\1\u01eb\102\0"+
    "\1\u01ec\77\0\1\u01ed\67\0\1\u01ee\73\0\1\u01ef\74\0"+
    "\1\u01f0\63\0\1\u01f1\101\0\1\u01f2\67\0\1\u01f3\73\0"+
    "\1\u01f4\73\0\1\u01f5\73\0\1\u01f6\71\0\1\u01f7\101\0"+
    "\1\u01f8\73\0\1\u01f9\63\0\1\u01fa\163\0\1\u01fb\73\0"+
    "\1\u01fc\3\0\1\u01fd\103\0\1\u01fe\74\0\1\u01ff\73\0"+
    "\1\u0200\137\0\1\u0201\73\0\1\u0202\27\0\1\u0203\73\0"+
    "\1\u0204\101\0\1\u0205\62\0\1\u0206\73\0\1\u0207\104\0"+
    "\1\u0208\66\0\1\u0209\72\0\1\u020a\73\0\1\u020b\74\0"+
    "\1\u020c\71\0\1\u020d\65\0\1\u020e\73\0\1\u020f\101\0"+
    "\1\u0210\141\0\1\u0211\32\0\1\u0212\73\0\1\u0213\134\0"+
    "\1\u0214\21\0\1\u0215\73\0\1\u0216\67\0\1\u0217\73\0"+
    "\1\u0218\104\0\1\u0219\73\0\1\u021a\101\0\1\u021b\73\0"+
    "\1\u021c\66\0\1\u021d\73\0\1\u021e\71\0\1\u021f\73\0"+
    "\1\u0220\141\0\1\u0221\73\0\1\u0222\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26040];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\6\11\4\1\2\11\1\1\1\11"+
    "\5\1\1\11\17\1\25\0\1\1\1\0\1\11\5\0"+
    "\1\1\7\0\1\1\4\11\1\0\1\11\1\0\3\11"+
    "\1\1\1\11\1\1\4\11\1\1\1\0\5\11\1\1"+
    "\3\11\1\1\35\0\1\1\6\0\1\11\3\0\1\1"+
    "\5\0\1\1\2\0\1\11\6\0\2\11\1\0\1\11"+
    "\1\0\6\11\26\0\2\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\2\11\4\0\1\11\10\0\1\11"+
    "\11\0\1\11\4\0\1\11\5\0\1\11\6\0\1\11"+
    "\5\0\1\11\2\0\1\11\1\0\1\11\2\0\1\1"+
    "\2\0\1\11\7\0\1\11\2\0\1\11\1\1\1\11"+
    "\2\0\1\11\15\0\1\11\3\0\1\11\1\0\1\11"+
    "\5\0\2\11\3\0\1\11\6\0\1\1\1\0\1\11"+
    "\3\0\1\11\5\0\1\11\3\0\1\11\5\0\1\11"+
    "\12\0\2\11\1\0\1\11\10\0\3\11\4\0\1\11"+
    "\3\0\2\11\16\0\2\11\12\0\1\11\2\0\1\11"+
    "\3\0\1\11\4\0\1\11\13\0\3\11\10\0\2\11"+
    "\14\0\2\11\3\0\1\11\4\0\2\11\5\0\1\11"+
    "\4\0\1\11\3\0\1\11\1\0\1\11\3\0\1\11"+
    "\5\0\1\11\6\0\1\11\4\0\1\11\14\0\1\11"+
    "\2\0\1\11\14\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[546];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _GroovyGeneratedLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GroovyGeneratedLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 145: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 146: break;
          case 3: 
            { return T_RBRACE;
            } 
            // fall through
          case 147: break;
          case 4: 
            { return T_LPAREN;
            } 
            // fall through
          case 148: break;
          case 5: 
            { return T_RPAREN;
            } 
            // fall through
          case 149: break;
          case 6: 
            { return T_LBRACK;
            } 
            // fall through
          case 150: break;
          case 7: 
            { return T_RBRACK;
            } 
            // fall through
          case 151: break;
          case 8: 
            { return T_LBRACE;
            } 
            // fall through
          case 152: break;
          case 9: 
            { return T_DOT;
            } 
            // fall through
          case 153: break;
          case 10: 
            { return T_MINUS;
            } 
            // fall through
          case 154: break;
          case 11: 
            { return T_GT;
            } 
            // fall through
          case 155: break;
          case 12: 
            { return T_DOLLAR;
            } 
            // fall through
          case 156: break;
          case 13: 
            { return T_AT;
            } 
            // fall through
          case 157: break;
          case 14: 
            { return T_SEMI;
            } 
            // fall through
          case 158: break;
          case 15: 
            { return T_COLON;
            } 
            // fall through
          case 159: break;
          case 16: 
            { return T_COMMA;
            } 
            // fall through
          case 160: break;
          case 17: 
            { return T_PLUS;
            } 
            // fall through
          case 161: break;
          case 18: 
            { return T_ASSIGN;
            } 
            // fall through
          case 162: break;
          case 19: 
            { return T_NOT;
            } 
            // fall through
          case 163: break;
          case 20: 
            { return T_BAND;
            } 
            // fall through
          case 164: break;
          case 21: 
            { return T_BOR;
            } 
            // fall through
          case 165: break;
          case 22: 
            { return T_BNOT;
            } 
            // fall through
          case 166: break;
          case 23: 
            { return T_LT;
            } 
            // fall through
          case 167: break;
          case 24: 
            { return T_Q;
            } 
            // fall through
          case 168: break;
          case 25: 
            { return T_STAR;
            } 
            // fall through
          case 169: break;
          case 26: 
            { return T_DIV;
            } 
            // fall through
          case 170: break;
          case 27: 
            { return T_REM;
            } 
            // fall through
          case 171: break;
          case 28: 
            { return T_XOR;
            } 
            // fall through
          case 172: break;
          case 29: 
            { return KW_IN;
            } 
            // fall through
          case 173: break;
          case 30: 
            { return KW_IF;
            } 
            // fall through
          case 174: break;
          case 31: 
            { return KW_DO;
            } 
            // fall through
          case 175: break;
          case 32: 
            { return T_RANGE;
            } 
            // fall through
          case 176: break;
          case 33: 
            { return T_METHOD_CLOSURE;
            } 
            // fall through
          case 177: break;
          case 34: 
            { return T_DEC;
            } 
            // fall through
          case 178: break;
          case 35: 
            { return T_ARROW;
            } 
            // fall through
          case 179: break;
          case 36: 
            { return T_MINUS_ASSIGN;
            } 
            // fall through
          case 180: break;
          case 37: 
            { return T_GE;
            } 
            // fall through
          case 181: break;
          case 38: 
            { return T_METHOD_REFERENCE;
            } 
            // fall through
          case 182: break;
          case 39: 
            { return T_INC;
            } 
            // fall through
          case 183: break;
          case 40: 
            { return T_PLUS_ASSIGN;
            } 
            // fall through
          case 184: break;
          case 41: 
            { return T_EQ;
            } 
            // fall through
          case 185: break;
          case 42: 
            { return T_REGEX_FIND;
            } 
            // fall through
          case 186: break;
          case 43: 
            { return T_NEQ;
            } 
            // fall through
          case 187: break;
          case 44: 
            { return T_BAND_ASSIGN;
            } 
            // fall through
          case 188: break;
          case 45: 
            { return T_LAND;
            } 
            // fall through
          case 189: break;
          case 46: 
            { return T_BOR_ASSIGN;
            } 
            // fall through
          case 190: break;
          case 47: 
            { return T_LOR;
            } 
            // fall through
          case 191: break;
          case 48: 
            { return T_LE;
            } 
            // fall through
          case 192: break;
          case 49: 
            { return T_SAFE_DOT;
            } 
            // fall through
          case 193: break;
          case 50: 
            { return T_ELVIS;
            } 
            // fall through
          case 194: break;
          case 51: 
            { return T_ELVIS_ASSIGN;
            } 
            // fall through
          case 195: break;
          case 52: 
            { return T_SPREAD_DOT;
            } 
            // fall through
          case 196: break;
          case 53: 
            { return T_STAR_ASSIGN;
            } 
            // fall through
          case 197: break;
          case 54: 
            { return T_POW;
            } 
            // fall through
          case 198: break;
          case 55: 
            { return T_DIV_ASSIGN;
            } 
            // fall through
          case 199: break;
          case 56: 
            { return T_REM_ASSIGN;
            } 
            // fall through
          case 200: break;
          case 57: 
            { return T_XOR_ASSIGN;
            } 
            // fall through
          case 201: break;
          case 58: 
            { return KW_AS;
            } 
            // fall through
          case 202: break;
          case 59: 
            { return KW_NEW;
            } 
            // fall through
          case 203: break;
          case 60: 
            { return KW_TRY;
            } 
            // fall through
          case 204: break;
          case 61: 
            { return KW_INT;
            } 
            // fall through
          case 205: break;
          case 62: 
            { return KW_DEF;
            } 
            // fall through
          case 206: break;
          case 63: 
            { return KW_FOR;
            } 
            // fall through
          case 207: break;
          case 64: 
            { return T_ELLIPSIS;
            } 
            // fall through
          case 208: break;
          case 65: 
            { return T_RANGE_EX;
            } 
            // fall through
          case 209: break;
          case 66: 
            { return T_RSH_ASSIGN;
            } 
            // fall through
          case 210: break;
          case 67: 
            { return T_ID;
            } 
            // fall through
          case 211: break;
          case 68: 
            { return T_REGEX_MATCH;
            } 
            // fall through
          case 212: break;
          case 69: 
            { return T_NID;
            } 
            // fall through
          case 213: break;
          case 70: 
            { return T_COMPARE;
            } 
            // fall through
          case 214: break;
          case 71: 
            { return T_LSH_ASSIGN;
            } 
            // fall through
          case 215: break;
          case 72: 
            { return T_POW_ASSIGN;
            } 
            // fall through
          case 216: break;
          case 73: 
            { return KW_ELSE;
            } 
            // fall through
          case 217: break;
          case 74: 
            { return KW_ENUM;
            } 
            // fall through
          case 218: break;
          case 75: 
            { return KW_LONG;
            } 
            // fall through
          case 219: break;
          case 76: 
            { return KW_CHAR;
            } 
            // fall through
          case 220: break;
          case 77: 
            { return KW_CASE;
            } 
            // fall through
          case 221: break;
          case 78: 
            { return KW_NULL;
            } 
            // fall through
          case 222: break;
          case 79: 
            { return KW_THIS;
            } 
            // fall through
          case 223: break;
          case 80: 
            { return KW_TRUE;
            } 
            // fall through
          case 224: break;
          case 81: 
            { return KW_BYTE;
            } 
            // fall through
          case 225: break;
          case 82: 
            { return T_RSHU_ASSIGN;
            } 
            // fall through
          case 226: break;
          case 83: 
            { return KW_VOID;
            } 
            // fall through
          case 227: break;
          case 84: 
            { return NUM_LONG;
            } 
            // fall through
          case 228: break;
          case 85: 
            { return KW_SHORT;
            } 
            // fall through
          case 229: break;
          case 86: 
            { return KW_SUPER;
            } 
            // fall through
          case 230: break;
          case 87: 
            { return KW_CLASS;
            } 
            // fall through
          case 231: break;
          case 88: 
            { return KW_CATCH;
            } 
            // fall through
          case 232: break;
          case 89: 
            { return KW_THROW;
            } 
            // fall through
          case 233: break;
          case 90: 
            { return KW_TRAIT;
            } 
            // fall through
          case 234: break;
          case 91: 
            { return KW_BREAK;
            } 
            // fall through
          case 235: break;
          case 92: 
            { return KW_FLOAT;
            } 
            // fall through
          case 236: break;
          case 93: 
            { return KW_FINAL;
            } 
            // fall through
          case 237: break;
          case 94: 
            { return KW_FALSE;
            } 
            // fall through
          case 238: break;
          case 95: 
            { return KW_WHILE;
            } 
            // fall through
          case 239: break;
          case 96: 
            { return NUM_FLOAT;
            } 
            // fall through
          case 240: break;
          case 97: 
            { return KW_STATIC;
            } 
            // fall through
          case 241: break;
          case 98: 
            { return KW_SWITCH;
            } 
            // fall through
          case 242: break;
          case 99: 
            { return KW_NATIVE;
            } 
            // fall through
          case 243: break;
          case 100: 
            { return KW_THROWS;
            } 
            // fall through
          case 244: break;
          case 101: 
            { return KW_IMPORT;
            } 
            // fall through
          case 245: break;
          case 102: 
            { return KW_DOUBLE;
            } 
            // fall through
          case 246: break;
          case 103: 
            { return KW_RETURN;
            } 
            // fall through
          case 247: break;
          case 104: 
            { return KW_ASSERT;
            } 
            // fall through
          case 248: break;
          case 105: 
            { return KW_PUBLIC;
            } 
            // fall through
          case 249: break;
          case 106: 
            { return NUM_DOUBLE;
            } 
            // fall through
          case 250: break;
          case 107: 
            { return KW_EXTENDS;
            } 
            // fall through
          case 251: break;
          case 108: 
            { return KW_BOOLEAN;
            } 
            // fall through
          case 252: break;
          case 109: 
            { return KW_DEFAULT;
            } 
            // fall through
          case 253: break;
          case 110: 
            { return KW_FINALLY;
            } 
            // fall through
          case 254: break;
          case 111: 
            { return KW_PRIVATE;
            } 
            // fall through
          case 255: break;
          case 112: 
            { return KW_PACKAGE;
            } 
            // fall through
          case 256: break;
          case 113: 
            { return NUM_INT;
            } 
            // fall through
          case 257: break;
          case 114: 
            { return KW_STRICTFP;
            } 
            // fall through
          case 258: break;
          case 115: 
            { return KW_CONTINUE;
            } 
            // fall through
          case 259: break;
          case 116: 
            { return NL;
            } 
            // fall through
          case 260: break;
          case 117: 
            { return KW_ABSTRACT;
            } 
            // fall through
          case 261: break;
          case 118: 
            { return KW_VOLATILE;
            } 
            // fall through
          case 262: break;
          case 119: 
            { return KW_TRANSIENT;
            } 
            // fall through
          case 263: break;
          case 120: 
            { return KW_INTERFACE;
            } 
            // fall through
          case 264: break;
          case 121: 
            { return SLASHY_END;
            } 
            // fall through
          case 265: break;
          case 122: 
            { return KW_PROTECTED;
            } 
            // fall through
          case 266: break;
          case 123: 
            { return KW_IMPLEMENTS;
            } 
            // fall through
          case 267: break;
          case 124: 
            { return KW_INSTANCEOF;
            } 
            // fall through
          case 268: break;
          case 125: 
            { return IDENTIFIER;
            } 
            // fall through
          case 269: break;
          case 126: 
            { return NUM_BIG_INT;
            } 
            // fall through
          case 270: break;
          case 127: 
            { return NUM_BIG_DECIMAL;
            } 
            // fall through
          case 271: break;
          case 128: 
            { return SLASHY_BEGIN;
            } 
            // fall through
          case 272: break;
          case 129: 
            { return T_WRONG;
            } 
            // fall through
          case 273: break;
          case 130: 
            { return GSTRING_END;
            } 
            // fall through
          case 274: break;
          case 131: 
            { return KW_SYNCHRONIZED;
            } 
            // fall through
          case 275: break;
          case 132: 
            { return SL_COMMENT;
            } 
            // fall through
          case 276: break;
          case 133: 
            { return DOLLAR_SLASHY_END;
            } 
            // fall through
          case 277: break;
          case 134: 
            { return SH_COMMENT;
            } 
            // fall through
          case 278: break;
          case 135: 
            { return ML_COMMENT;
            } 
            // fall through
          case 279: break;
          case 136: 
            { return SLASHY_CONTENT;
            } 
            // fall through
          case 280: break;
          case 137: 
            { return GSTRING_BEGIN;
            } 
            // fall through
          case 281: break;
          case 138: 
            { return DOLLAR_SLASHY_BEGIN;
            } 
            // fall through
          case 282: break;
          case 139: 
            { return GSTRING_CONTENT;
            } 
            // fall through
          case 283: break;
          case 140: 
            { return DOLLAR_SLASHY_CONTENT;
            } 
            // fall through
          case 284: break;
          case 141: 
            { return STRING_SQ;
            } 
            // fall through
          case 285: break;
          case 142: 
            { return STRING_DQ;
            } 
            // fall through
          case 286: break;
          case 143: 
            { return STRING_TSQ;
            } 
            // fall through
          case 287: break;
          case 144: 
            { return STRING_TDQ;
            } 
            // fall through
          case 288: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
